// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/modules/lexical/Exemplo.jflex


 /*  Esta seção é copiada antes da declaração da classe do analisador léxico.
  *  É nesta seção que se deve incluir imports e declaração de pacotes.
  *  Neste exemplo não temos nada a incluir nesta seção.
  */
  

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LextTest {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1d00\1\u1e00"+
    "\1\u1f00\1\u2000\2\u2100\1\u2200\7\u2100\1\u2300\1\u2400\1\u2500"+
    "\1\u2100\1\u2600\1\u2700\2\u2100\31\u1100\1\u2800\121\u1100\1\u2900"+
    "\4\u1100\1\u2a00\1\u1100\1\u2b00\1\u2c00\1\u2d00\1\u2e00\1\u2f00"+
    "\1\u3000\53\u1100\1\u3100\10\u3200\31\u2100\1\u1100\1\u3300\1\u3400"+
    "\1\u1100\1\u3500\1\u3600\1\u3700\1\u3800\1\u2100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2100\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2100"+
    "\1\u5000\1\u5100\1\u5200\1\u2100\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2100\4\u1100\1\u5600\17\u2100\2\u1100\1\u5700\41\u2100\2\u1100"+
    "\1\u5800\1\u5900\2\u2100\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2100\1\u1100\1\u5e00\1\u5f00\11\u2100\1\u6000\27\u2100"+
    "\1\u6100\1\u6200\1\u6300\1\u6400\11\u2100\1\u6500\1\u6600\5\u2100"+
    "\1\u6700\1\u6800\4\u2100\1\u6900\2\u2100\1\u6a00\16\u2100\246\u1100"+
    "\1\u6b00\20\u1100\1\u6c00\1\u6d00\25\u1100\1\u6e00\34\u1100\1\u6f00"+
    "\14\u2100\2\u1100\1\u7000\u0e05\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\3\0\1\7\1\10\1\0\2\11\1\12\1\13"+
    "\1\0\1\14\1\15\1\16\12\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\0\1\25\1\26\1\27\2\25\1\30"+
    "\2\25\1\31\21\25\1\32\1\0\1\33\1\0\1\34"+
    "\1\0\1\35\2\36\1\37\1\40\1\41\1\36\1\42"+
    "\1\43\2\36\1\44\1\36\1\45\1\46\1\47\1\36"+
    "\1\50\1\51\1\52\1\53\1\36\1\54\3\36\1\55"+
    "\1\0\1\56\7\0\1\3\44\0\1\36\12\0\1\36"+
    "\4\0\1\36\5\0\27\25\1\0\7\25\30\36\1\0"+
    "\10\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\2\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\2\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\2\25"+
    "\1\36\1\25\1\36\1\25\3\36\2\25\1\36\1\25"+
    "\1\36\2\25\1\36\3\25\2\36\4\25\1\36\2\25"+
    "\1\36\3\25\3\36\2\25\1\36\2\25\1\36\1\25"+
    "\1\36\1\25\1\36\2\25\1\36\1\25\2\36\1\25"+
    "\1\36\2\25\1\36\3\25\1\36\1\25\1\36\2\25"+
    "\2\36\1\57\1\25\3\36\4\57\1\25\1\57\1\36"+
    "\1\25\1\57\1\36\1\25\1\57\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\2\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\2\36"+
    "\1\25\1\57\1\36\1\25\1\36\3\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\7\36\2\25\1\36\2\25\2\36\1\25\1\36\4\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\105\36\1\57\44\36\7\57\2\36\4\0\14\57\16\0"+
    "\5\36\7\0\1\57\1\0\1\57\126\0\1\60\52\0"+
    "\1\25\1\36\1\25\1\36\1\57\1\0\1\25\1\36"+
    "\2\0\4\36\1\0\1\25\6\0\1\25\1\0\3\25"+
    "\1\0\1\25\1\0\2\25\1\36\21\25\1\0\11\25"+
    "\43\36\1\25\2\36\3\25\3\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\5\36\1\25\1\36\1\0"+
    "\1\25\1\36\2\25\2\36\63\25\60\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\10\0\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\2\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\2\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\0\46\25\2\0"+
    "\1\57\6\0\51\36\107\0\33\57\4\0\4\57\55\0"+
    "\53\57\25\0\12\17\4\0\2\57\1\0\143\57\1\0"+
    "\1\57\17\0\2\57\7\0\2\57\12\17\3\57\2\0"+
    "\1\57\20\0\1\57\1\0\36\57\35\0\131\57\13\0"+
    "\1\57\16\0\12\17\41\57\11\0\2\57\4\0\1\57"+
    "\5\0\26\57\4\0\1\57\11\0\1\57\3\0\1\57"+
    "\27\0\31\57\7\0\13\57\65\0\25\57\1\0\10\57"+
    "\106\0\66\57\3\0\1\57\22\0\1\57\7\0\12\57"+
    "\4\0\12\17\1\0\20\57\4\0\10\57\2\0\2\57"+
    "\2\0\26\57\1\0\7\57\1\0\1\57\3\0\4\57"+
    "\3\0\1\57\20\0\1\57\15\0\2\57\1\0\3\57"+
    "\4\0\12\17\2\57\12\0\1\57\10\0\6\57\4\0"+
    "\2\57\2\0\26\57\1\0\7\57\1\0\2\57\1\0"+
    "\2\57\1\0\2\57\37\0\4\57\1\0\1\57\7\0"+
    "\12\17\2\0\3\57\20\0\11\57\1\0\3\57\1\0"+
    "\26\57\1\0\7\57\1\0\2\57\1\0\5\57\3\0"+
    "\1\57\22\0\1\57\17\0\2\57\4\0\12\17\11\0"+
    "\1\57\13\0\10\57\2\0\2\57\2\0\26\57\1\0"+
    "\7\57\1\0\2\57\1\0\5\57\3\0\1\57\36\0"+
    "\2\57\1\0\3\57\4\0\12\17\1\0\1\57\21\0"+
    "\1\57\1\0\6\57\3\0\3\57\1\0\4\57\3\0"+
    "\2\57\1\0\1\57\1\0\2\57\3\0\2\57\3\0"+
    "\3\57\3\0\14\57\26\0\1\57\25\0\12\17\25\0"+
    "\10\57\1\0\3\57\1\0\27\57\1\0\20\57\3\0"+
    "\1\57\32\0\3\57\5\0\2\57\4\0\12\17\20\0"+
    "\1\57\4\0\10\57\1\0\3\57\1\0\27\57\1\0"+
    "\12\57\1\0\5\57\3\0\1\57\40\0\1\57\1\0"+
    "\2\57\4\0\12\17\1\0\2\57\22\0\10\57\1\0"+
    "\3\57\1\0\51\57\2\0\1\57\20\0\1\57\5\0"+
    "\3\57\10\0\3\57\4\0\12\17\12\0\6\57\5\0"+
    "\22\57\3\0\30\57\1\0\11\57\1\0\1\57\2\0"+
    "\7\57\37\0\12\17\21\0\60\57\1\0\2\57\14\0"+
    "\7\57\11\0\12\17\47\0\2\57\1\0\1\57\1\0"+
    "\5\57\1\0\30\57\1\0\1\57\1\0\12\57\1\0"+
    "\2\57\11\0\1\57\2\0\5\57\1\0\1\57\11\0"+
    "\12\17\2\0\4\57\40\0\1\57\37\0\12\17\26\0"+
    "\10\57\1\0\44\57\33\0\5\57\163\0\53\57\24\0"+
    "\1\57\12\17\6\0\6\57\4\0\4\57\3\0\1\57"+
    "\3\0\2\57\7\0\3\57\4\0\15\57\14\0\1\57"+
    "\1\0\12\17\6\0\46\25\1\0\1\25\5\0\1\25"+
    "\2\0\53\36\1\0\1\57\3\36\u0149\57\1\0\4\57"+
    "\2\0\7\57\1\0\1\57\1\0\4\57\2\0\51\57"+
    "\1\0\4\57\2\0\41\57\1\0\4\57\2\0\7\57"+
    "\1\0\1\57\1\0\4\57\2\0\17\57\1\0\71\57"+
    "\1\0\4\57\2\0\103\57\45\0\20\57\20\0\126\25"+
    "\2\0\6\36\3\0\u016c\57\2\0\21\57\1\0\32\57"+
    "\5\0\113\57\6\0\10\57\7\0\15\57\1\0\4\57"+
    "\16\0\22\57\16\0\22\57\16\0\15\57\1\0\3\57"+
    "\17\0\64\57\43\0\1\57\4\0\1\57\3\0\12\17"+
    "\46\0\12\17\6\0\131\57\7\0\5\57\2\0\42\57"+
    "\1\0\1\57\5\0\106\57\12\0\37\57\47\0\12\17"+
    "\36\57\2\0\5\57\13\0\54\57\4\0\32\57\6\0"+
    "\12\17\46\0\27\57\11\0\65\57\53\0\12\17\6\0"+
    "\12\17\15\0\1\57\135\0\57\57\21\0\7\57\4\0"+
    "\12\17\51\0\36\57\15\0\2\57\12\17\54\57\32\0"+
    "\44\57\34\0\12\17\3\0\3\57\12\17\44\57\2\0"+
    "\11\36\7\0\53\25\2\0\3\25\51\0\4\57\1\0"+
    "\6\57\1\0\2\57\3\0\1\57\5\0\300\36\100\0"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\11\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\11\36"+
    "\10\25\6\36\2\0\6\25\2\0\10\36\10\25\10\36"+
    "\10\25\6\36\2\0\6\25\2\0\10\36\1\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\1\25\10\36\10\25"+
    "\16\36\2\0\10\36\10\57\10\36\10\57\10\36\10\57"+
    "\5\36\1\0\2\36\4\25\1\57\1\0\1\36\3\0"+
    "\3\36\1\0\2\36\4\25\1\57\3\0\4\36\2\0"+
    "\2\36\4\25\4\0\10\36\5\25\5\0\3\36\1\0"+
    "\2\36\4\25\1\57\53\0\2\3\107\0\1\36\15\0"+
    "\1\36\20\0\15\36\145\0\1\25\4\0\1\25\2\0"+
    "\1\36\3\25\2\36\3\25\1\36\1\0\1\25\3\0"+
    "\5\25\6\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\4\25\1\0\1\36\4\25\1\36\4\57\1\36\2\0"+
    "\2\36\2\25\5\0\1\25\4\36\4\0\1\36\21\0"+
    "\20\61\20\60\3\0\1\25\1\36\u0231\0\32\61\32\60"+
    "\26\0\57\25\1\0\57\36\1\0\1\25\1\36\3\25"+
    "\2\36\1\25\1\36\1\25\1\36\1\25\1\36\4\25"+
    "\1\36\1\25\2\36\1\25\10\36\3\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\2\36\6\0\1\25\1\36\1\25\1\36\3\0\1\25"+
    "\1\36\14\0\46\36\1\0\1\36\5\0\1\36\2\0"+
    "\70\57\7\0\1\57\20\0\27\57\11\0\7\57\1\0"+
    "\7\57\1\0\7\57\1\0\7\57\1\0\7\57\1\0"+
    "\7\57\1\0\7\57\1\0\7\57\120\0\1\57\325\0"+
    "\2\57\52\0\5\57\5\0\2\57\4\0\126\57\6\0"+
    "\3\57\1\0\132\57\1\0\4\57\5\0\53\57\1\0"+
    "\136\57\21\0\33\57\65\0\306\57\112\0\360\57\20\0"+
    "\215\57\103\0\56\57\2\0\15\57\3\0\20\57\12\17"+
    "\2\57\24\0\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\57\20\0\1\57\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\3\36\2\0"+
    "\106\57\61\0\11\57\2\0\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\3\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\25\12\36"+
    "\1\25\1\36\1\25\1\36\2\25\1\36\1\25\1\36"+
    "\1\25\1\36\1\25\1\36\1\25\1\36\1\57\2\0"+
    "\1\25\1\36\1\25\1\36\1\57\1\25\1\36\1\25"+
    "\3\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\1\25\1\36\5\25\1\36\5\25"+
    "\1\36\1\25\1\36\1\25\1\36\1\25\1\36\1\25"+
    "\1\36\1\25\1\36\2\0\1\25\1\36\3\25\60\0"+
    "\1\57\3\36\7\57\1\0\3\57\1\0\4\57\1\0"+
    "\27\57\35\0\64\57\16\0\62\57\34\0\12\17\30\0"+
    "\6\57\3\0\1\57\1\0\2\57\1\0\12\17\34\57"+
    "\12\0\27\57\31\0\35\57\7\0\57\57\34\0\1\57"+
    "\12\17\6\0\5\57\1\0\12\57\12\17\5\57\1\0"+
    "\51\57\27\0\3\57\1\0\10\57\4\0\12\17\6\0"+
    "\27\57\3\0\1\57\3\0\62\57\1\0\1\57\3\0"+
    "\2\57\2\0\5\57\2\0\1\57\1\0\1\57\30\0"+
    "\3\57\2\0\13\57\7\0\3\57\14\0\6\57\2\0"+
    "\6\57\2\0\6\57\11\0\7\57\1\0\7\57\1\0"+
    "\53\36\1\0\14\36\10\0\120\36\43\57\15\0\12\17"+
    "\6\0\244\57\14\0\27\57\4\0\61\57\4\0\u0100\3"+
    "\156\57\2\0\152\57\46\0\7\36\14\0\5\36\5\0"+
    "\1\57\1\0\12\57\1\0\15\57\1\0\5\57\1\0"+
    "\1\57\1\0\2\57\1\0\2\57\1\0\154\57\41\0"+
    "\153\57\22\0\100\57\2\0\66\57\50\0\14\57\164\0"+
    "\5\57\1\0\207\57\23\0\12\17\7\0\32\25\6\0"+
    "\32\36\13\0\131\57\3\0\6\57\2\0\6\57\2\0"+
    "\6\57\2\0\3\57\43\0\14\57\1\0\32\57\1\0"+
    "\23\57\1\0\2\57\1\0\17\57\2\0\16\57\42\0"+
    "\173\57\205\0\35\57\3\0\61\57\57\0\40\57\15\0"+
    "\24\57\1\0\10\57\6\0\46\57\12\0\36\57\2\0"+
    "\44\57\4\0\10\57\60\0\50\25\50\36\116\57\2\0"+
    "\12\17\6\0\44\25\4\0\44\36\4\0\50\57\10\0"+
    "\64\57\234\0\67\57\11\0\26\57\12\0\10\57\230\0"+
    "\6\57\2\0\1\57\1\0\54\57\1\0\2\57\3\0"+
    "\1\57\2\0\27\57\12\0\27\57\11\0\37\57\101\0"+
    "\23\57\1\0\2\57\12\0\26\57\12\0\32\57\106\0"+
    "\70\57\6\0\2\57\100\0\1\57\17\0\4\57\1\0"+
    "\3\57\1\0\35\57\52\0\35\57\3\0\35\57\43\0"+
    "\10\57\1\0\34\57\33\0\66\57\12\0\26\57\12\0"+
    "\23\57\15\0\22\57\156\0\111\57\67\0\63\25\15\0"+
    "\63\36\15\0\44\57\14\0\12\17\306\0\35\57\12\0"+
    "\1\57\10\0\26\57\232\0\27\57\14\0\65\57\56\0"+
    "\12\17\23\0\55\57\40\0\31\57\7\0\12\17\11\0"+
    "\44\57\17\0\12\17\4\0\1\57\13\0\43\57\3\0"+
    "\1\57\14\0\60\57\16\0\4\57\13\0\12\17\1\57"+
    "\1\0\1\57\43\0\22\57\1\0\31\57\124\0\7\57"+
    "\1\0\1\57\1\0\4\57\1\0\17\57\1\0\12\57"+
    "\7\0\57\57\21\0\12\17\13\0\10\57\2\0\2\57"+
    "\2\0\26\57\1\0\7\57\1\0\2\57\1\0\5\57"+
    "\3\0\1\57\22\0\1\57\14\0\5\57\236\0\65\57"+
    "\22\0\4\57\5\0\12\17\5\0\1\57\40\0\60\57"+
    "\24\0\2\57\1\0\1\57\10\0\12\17\246\0\57\57"+
    "\51\0\4\57\44\0\60\57\24\0\1\57\13\0\12\17"+
    "\46\0\53\57\15\0\1\57\7\0\12\17\66\0\33\57"+
    "\25\0\12\17\306\0\54\57\164\0\40\25\40\36\12\17"+
    "\25\0\1\57\240\0\10\57\2\0\47\57\20\0\1\57"+
    "\1\0\1\57\34\0\1\57\12\0\50\57\7\0\1\57"+
    "\25\0\1\57\13\0\56\57\23\0\1\57\42\0\71\57"+
    "\7\0\11\57\1\0\45\57\21\0\1\57\17\0\12\17"+
    "\30\0\36\57\160\0\7\57\1\0\2\57\1\0\46\57"+
    "\25\0\1\57\11\0\12\17\6\0\6\57\1\0\2\57"+
    "\1\0\40\57\16\0\1\57\7\0\12\17\u0136\0\23\57"+
    "\15\0\232\57\346\0\304\57\274\0\57\57\321\0\107\57"+
    "\271\0\71\57\7\0\37\57\1\0\12\17\146\0\36\57"+
    "\22\0\60\57\20\0\4\57\14\0\12\17\11\0\25\57"+
    "\5\0\23\57\260\0\40\25\40\36\200\0\113\57\5\0"+
    "\1\57\102\0\15\57\100\0\2\57\1\0\1\57\34\0"+
    "\370\57\10\0\363\57\15\0\37\57\61\0\3\57\21\0"+
    "\4\57\10\0\u018c\57\4\0\153\57\5\0\15\57\3\0"+
    "\11\57\7\0\12\57\146\0\32\25\32\36\32\25\7\36"+
    "\1\0\22\36\32\25\32\36\1\25\1\0\2\25\2\0"+
    "\1\25\2\0\2\25\2\0\4\25\1\0\10\25\4\36"+
    "\1\0\1\36\1\0\7\36\1\0\13\36\32\25\32\36"+
    "\2\25\1\0\4\25\2\0\10\25\1\0\7\25\1\0"+
    "\32\36\2\25\1\0\4\25\1\0\5\25\1\0\1\25"+
    "\3\0\7\25\1\0\32\36\32\25\32\36\32\25\32\36"+
    "\32\25\32\36\32\25\32\36\32\25\32\36\32\25\34\36"+
    "\2\0\31\25\1\0\31\36\1\0\6\36\31\25\1\0"+
    "\31\36\1\0\6\36\31\25\1\0\31\36\1\0\6\36"+
    "\31\25\1\0\31\36\1\0\6\36\31\25\1\0\31\36"+
    "\1\0\6\36\1\25\1\36\2\0\62\17\55\57\12\0"+
    "\7\57\2\0\12\17\4\0\1\57\u0171\0\54\57\4\0"+
    "\12\17\6\0\305\57\73\0\42\25\42\36\7\0\1\57"+
    "\4\0\12\17\246\0\4\57\1\0\33\57\1\0\2\57"+
    "\1\0\1\57\2\0\1\57\1\0\12\57\1\0\4\57"+
    "\1\0\1\57\1\0\1\57\6\0\1\57\4\0\1\57"+
    "\1\0\1\57\1\0\1\57\1\0\3\57\1\0\2\57"+
    "\1\0\1\57\2\0\1\57\1\0\1\57\1\0\1\57"+
    "\1\0\1\57\1\0\1\57\1\0\2\57\1\0\1\57"+
    "\2\0\4\57\1\0\7\57\1\0\4\57\1\0\4\57"+
    "\1\0\1\57\1\0\12\57\1\0\21\57\5\0\3\57"+
    "\1\0\5\57\1\0\21\57\164\0\32\61\6\0\32\61"+
    "\6\0\32\61\166\0\327\57\51\0\65\57\13\0\336\57"+
    "\2\0\u0182\57\16\0\u0131\57\37\0\36\57\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28928];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\5\23\1\24\1\25\11\26\1\27"+
    "\1\30\1\23\1\31\3\1\1\32\1\33\1\0\1\34"+
    "\1\0\1\35\4\31\3\26\1\36\6\26\1\37\1\40"+
    "\1\1\3\31\1\41\4\26\1\42\5\26\1\43\1\44"+
    "\1\31\1\45\1\46\2\26\1\47\1\26\1\50\1\26"+
    "\1\51\1\52\1\53\1\26\1\54\2\26\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\144\0\226\0\310\0\144\0\372"+
    "\0\144\0\144\0\144\0\u012c\0\u015e\0\144\0\u0190\0\144"+
    "\0\144\0\144\0\u01c2\0\144\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\144\0\144\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\144\0\144\0\u01f4"+
    "\0\u04e2\0\u0514\0\144\0\144\0\144\0\u0546\0\u015e\0\u015e"+
    "\0\144\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4"+
    "\0\u02ee\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\144"+
    "\0\144\0\u0802\0\u0834\0\u0866\0\u0898\0\u01f4\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u02ee\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u01f4\0\u01f4\0\u0a8c\0\u02ee\0\u02ee\0\u0abe\0\u0af0\0\u02ee"+
    "\0\u0b22\0\u02ee\0\u0b54\0\u02ee\0\u01f4\0\u02ee\0\u0b86\0\u02ee"+
    "\0\u0bb8\0\u0bea\0\u02ee\0\u02ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\3\2\34\1\35\1\36\1\37"+
    "\1\34\1\40\1\34\1\41\1\34\1\42\1\43\1\34"+
    "\1\44\2\34\1\45\1\46\1\47\1\34\1\50\14\51"+
    "\1\52\41\51\1\53\3\51\64\0\1\4\102\0\1\54"+
    "\46\0\1\55\65\0\1\56\64\0\1\57\57\0\1\60"+
    "\1\0\1\17\65\0\1\61\55\0\1\50\5\0\5\50"+
    "\2\0\21\50\2\0\1\50\21\0\1\50\5\0\5\50"+
    "\2\0\12\50\1\62\6\50\2\0\1\50\21\0\1\50"+
    "\5\0\5\50\2\0\6\50\1\63\12\50\2\0\1\50"+
    "\21\0\1\50\5\0\5\50\2\0\10\50\1\64\10\50"+
    "\2\0\1\50\21\0\1\50\5\0\5\50\2\0\11\50"+
    "\1\65\7\50\2\0\1\50\21\0\1\34\5\0\5\34"+
    "\2\0\21\34\2\0\1\34\21\0\1\34\5\0\5\34"+
    "\2\0\1\34\1\66\17\34\2\0\1\34\21\0\1\34"+
    "\5\0\5\34\2\0\10\34\1\67\10\34\2\0\1\34"+
    "\21\0\1\34\5\0\5\34\2\0\1\34\1\70\17\34"+
    "\2\0\1\34\21\0\1\34\5\0\5\34\2\0\5\34"+
    "\1\71\10\34\1\72\2\34\2\0\1\34\21\0\1\34"+
    "\5\0\5\34\2\0\4\34\1\73\12\34\1\74\1\34"+
    "\2\0\1\34\21\0\1\34\5\0\5\34\2\0\14\34"+
    "\1\75\4\34\2\0\1\34\21\0\1\34\5\0\5\34"+
    "\2\0\4\34\1\76\14\34\2\0\1\34\21\0\1\34"+
    "\5\0\5\34\2\0\14\34\1\77\4\34\2\0\1\34"+
    "\16\0\1\100\45\0\14\51\1\0\41\51\1\0\3\51"+
    "\14\0\1\101\41\0\1\101\3\0\2\56\1\53\2\0"+
    "\1\102\54\56\17\0\1\50\5\0\5\50\2\0\12\50"+
    "\1\103\6\50\2\0\1\50\21\0\1\50\5\0\5\50"+
    "\2\0\1\50\1\104\17\50\2\0\1\50\21\0\1\50"+
    "\5\0\5\50\2\0\12\50\1\105\6\50\2\0\1\50"+
    "\21\0\1\50\5\0\5\50\2\0\16\50\1\106\2\50"+
    "\2\0\1\50\21\0\1\34\5\0\5\34\2\0\16\34"+
    "\1\107\2\34\2\0\1\34\21\0\1\34\5\0\5\34"+
    "\2\0\15\34\1\110\3\34\2\0\1\34\21\0\1\34"+
    "\5\0\5\34\2\0\10\34\1\111\10\34\2\0\1\34"+
    "\21\0\1\34\5\0\5\34\2\0\4\34\1\112\14\34"+
    "\2\0\1\34\21\0\1\34\5\0\5\34\2\0\20\34"+
    "\1\113\2\0\1\34\21\0\1\34\5\0\5\34\2\0"+
    "\10\34\1\114\10\34\2\0\1\34\21\0\1\34\5\0"+
    "\5\34\2\0\7\34\1\115\11\34\2\0\1\34\21\0"+
    "\1\34\5\0\5\34\2\0\1\34\1\116\14\34\1\117"+
    "\2\34\2\0\1\34\21\0\1\34\5\0\5\34\2\0"+
    "\17\34\1\120\1\34\2\0\1\34\4\0\1\53\76\0"+
    "\1\50\5\0\5\50\2\0\10\50\1\121\10\50\2\0"+
    "\1\50\21\0\1\50\5\0\5\50\2\0\14\50\1\122"+
    "\4\50\2\0\1\50\21\0\1\50\5\0\5\50\2\0"+
    "\1\50\1\123\17\50\2\0\1\50\21\0\1\34\5\0"+
    "\5\34\2\0\1\34\1\124\17\34\2\0\1\34\21\0"+
    "\1\34\5\0\5\34\2\0\4\34\1\125\14\34\2\0"+
    "\1\34\21\0\1\34\5\0\5\34\2\0\15\34\1\126"+
    "\3\34\2\0\1\34\21\0\1\34\5\0\5\34\2\0"+
    "\14\34\1\127\4\34\2\0\1\34\21\0\1\34\5\0"+
    "\5\34\2\0\10\34\1\130\10\34\2\0\1\34\21\0"+
    "\1\34\5\0\5\34\2\0\11\34\1\131\7\34\2\0"+
    "\1\34\21\0\1\34\5\0\5\34\2\0\3\34\1\132"+
    "\15\34\2\0\1\34\21\0\1\34\5\0\5\34\2\0"+
    "\17\34\1\133\1\34\2\0\1\34\21\0\1\34\5\0"+
    "\5\34\2\0\4\34\1\134\14\34\2\0\1\34\21\0"+
    "\1\50\5\0\5\50\2\0\16\50\1\135\2\50\2\0"+
    "\1\50\21\0\1\34\5\0\5\34\2\0\4\34\1\136"+
    "\14\34\2\0\1\34\21\0\1\34\5\0\5\34\2\0"+
    "\1\34\1\137\17\34\2\0\1\34\21\0\1\34\5\0"+
    "\5\34\2\0\16\34\1\140\2\34\2\0\1\34\21\0"+
    "\1\34\5\0\5\34\2\0\14\34\1\141\4\34\2\0"+
    "\1\34\21\0\1\34\5\0\5\34\2\0\16\34\1\142"+
    "\2\34\2\0\1\34\21\0\1\34\5\0\5\34\2\0"+
    "\11\34\1\143\7\34\2\0\1\34\21\0\1\34\5\0"+
    "\5\34\2\0\4\34\1\144\14\34\2\0\1\34\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\2\1\1\11\1\1\3\11\2\1"+
    "\1\11\1\1\3\11\1\1\1\11\5\1\2\11\12\1"+
    "\2\11\3\1\3\11\1\0\1\1\1\0\1\11\16\1"+
    "\2\11\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    
    /* Código arbitrário pode ser inserido diretamente no analisador dessa forma. 
     * Aqui podemos declarar variáveis e métodos adicionais que julgarmos necessários. 
     */
    private int ntk;
    
    public int readedTokens(){
       return ntk;
    }
    private Token symbol(TOKEN_TYPE t) {
        ntk++;
        return new Token(t,yytext(), yyline+1, yycolumn+1);
        
    }
    private Token symbol(TOKEN_TYPE t, Object value) {
        ntk++;
        return new Token(t, value, yyline+1, yycolumn+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LextTest(java.io.Reader in) {
      ntk = 0; // Isto é copiado direto no construtor do lexer. 
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 47: break;
          case 2:
            { throw new RuntimeException("Illegal character <"+yytext()+">");
            }
            // fall through
          case 48: break;
          case 3:
            { /* Não faz nada  */
            }
            // fall through
          case 49: break;
          case 4:
            { return symbol(TOKEN_TYPE.NOT_SIGN);
            }
            // fall through
          case 50: break;
          case 5:
            { return symbol(TOKEN_TYPE.MOD_SIGN);
            }
            // fall through
          case 51: break;
          case 6:
            { return symbol(TOKEN_TYPE.AMPERSAND);
            }
            // fall through
          case 52: break;
          case 7:
            { return symbol(TOKEN_TYPE.OPEN_PARENT);
            }
            // fall through
          case 53: break;
          case 8:
            { return symbol(TOKEN_TYPE.MULT_SIGN);
            }
            // fall through
          case 54: break;
          case 9:
            { return symbol(TOKEN_TYPE.PLUS_SIGN);
            }
            // fall through
          case 55: break;
          case 10:
            { return symbol(TOKEN_TYPE.MINUS_SIGN);
            }
            // fall through
          case 56: break;
          case 11:
            { return symbol(TOKEN_TYPE.COMMA);
            }
            // fall through
          case 57: break;
          case 12:
            { return symbol(TOKEN_TYPE.DIVIDE_SIGN);
            }
            // fall through
          case 58: break;
          case 13:
            { return symbol(TOKEN_TYPE.INT_VAL, Integer.parseInt(yytext()) );
            }
            // fall through
          case 59: break;
          case 14:
            { return symbol(TOKEN_TYPE.DOUBLE_COLON);
            }
            // fall through
          case 60: break;
          case 15:
            { return symbol(TOKEN_TYPE.SEMICOLON);
            }
            // fall through
          case 61: break;
          case 16:
            { return symbol(TOKEN_TYPE.LESSER_THAN);
            }
            // fall through
          case 62: break;
          case 17:
            { return symbol(TOKEN_TYPE.EQUAL);
            }
            // fall through
          case 63: break;
          case 18:
            { return symbol(TOKEN_TYPE.GREATER_THAN);
            }
            // fall through
          case 64: break;
          case 19:
            { return symbol(TOKEN_TYPE.CHAR_VAL);
            }
            // fall through
          case 65: break;
          case 20:
            { return symbol(TOKEN_TYPE.OPEN_BRACE);
            }
            // fall through
          case 66: break;
          case 21:
            { return symbol(TOKEN_TYPE.CLOSE_BRACE);
            }
            // fall through
          case 67: break;
          case 22:
            { return symbol(TOKEN_TYPE.ID);
            }
            // fall through
          case 68: break;
          case 23:
            { return symbol(TOKEN_TYPE.OPEN_BRECKET);
            }
            // fall through
          case 69: break;
          case 24:
            { return symbol(TOKEN_TYPE.CLOSE_BRECKET);
            }
            // fall through
          case 70: break;
          case 25:
            { return symbol(TOKEN_TYPE.NAME_VAL);
            }
            // fall through
          case 71: break;
          case 26:
            { return symbol(TOKEN_TYPE.NOT_EQUAL_SIGN);
            }
            // fall through
          case 72: break;
          case 27:
            { return symbol(TOKEN_TYPE.AND_SIGN);
            }
            // fall through
          case 73: break;
          case 28:
            { return symbol(TOKEN_TYPE.FLOAT_VAL, Float.parseFloat(yytext()) );
            }
            // fall through
          case 74: break;
          case 29:
            { return symbol(TOKEN_TYPE.EQUALITY_SIGN);
            }
            // fall through
          case 75: break;
          case 30:
            { return symbol(TOKEN_TYPE.IF);
            }
            // fall through
          case 76: break;
          case 31:
            { yybegin(COMMENT);
            }
            // fall through
          case 77: break;
          case 32:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 78: break;
          case 33:
            { return symbol(TOKEN_TYPE.INT);
            }
            // fall through
          case 79: break;
          case 34:
            { return symbol(TOKEN_TYPE.NEW);
            }
            // fall through
          case 80: break;
          case 35:
            { return symbol(TOKEN_TYPE.BOOL);
            }
            // fall through
          case 81: break;
          case 36:
            { return symbol(TOKEN_TYPE.CHAR);
            }
            // fall through
          case 82: break;
          case 37:
            { return symbol(TOKEN_TYPE.DATA);
            }
            // fall through
          case 83: break;
          case 38:
            { return symbol(TOKEN_TYPE.ELSE);
            }
            // fall through
          case 84: break;
          case 39:
            { return symbol(TOKEN_TYPE.NULL);
            }
            // fall through
          case 85: break;
          case 40:
            { return symbol(TOKEN_TYPE.READ);
            }
            // fall through
          case 86: break;
          case 41:
            { return symbol(TOKEN_TYPE.TRUE);
            }
            // fall through
          case 87: break;
          case 42:
            { return symbol(TOKEN_TYPE.FLOAT);
            }
            // fall through
          case 88: break;
          case 43:
            { return symbol(TOKEN_TYPE.FALSE);
            }
            // fall through
          case 89: break;
          case 44:
            { return symbol(TOKEN_TYPE.PRINT);
            }
            // fall through
          case 90: break;
          case 45:
            { return symbol(TOKEN_TYPE.RETURN);
            }
            // fall through
          case 91: break;
          case 46:
            { return symbol(TOKEN_TYPE.ITERATE);
            }
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
